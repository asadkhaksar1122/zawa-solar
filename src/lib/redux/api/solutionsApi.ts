
import type { SolarSolution } from '@/lib/types';
import { baseApi } from './baseApi';

// Inject endpoints into the baseApi
export const solutionsApi = baseApi.injectEndpoints({
  endpoints: (builder) => ({
    getSolutions: builder.query<SolarSolution[], void>({
      query: () => 'solutions', // This will make a GET request to /api/solutions
      providesTags: ['Solutions'],
    }),
    getSolutionById: builder.query<SolarSolution, string>({
      query: (id) => `solutions/${id}`, // This will make a GET request to /api/solutions/[id]
      providesTags: (result, error, id) => [{ type: 'Solution', id }],
    }),
    // You can inject other solution-related endpoints here (e.g., addSolution, etc.)
  }),
  // You can override existing endpoints if needed, though it's usually not recommended
  // overrideExisting: false, 
});

// Export hooks for usage in UI components
// These hooks are automatically generated by RTK Query based on the defined endpoints
export const { useGetSolutionsQuery, useGetSolutionByIdQuery } = solutionsApi;

// Add tags for cache invalidation if you add mutations later
// e.g., for addSolarSolution mutation in actions.ts, if it were RTK Query:
// invalidatesTags: ['Solutions'],
